100000/75
6000/1333
4.5/6000
library(synapser)
synLogin()
load(synGet('syn10157629')$path)
all.fit
head(all.fit$SourceDiagnosis)
head(all.fit$SourceDiagnosis$coefficients)
head(all.fit$SourceDiagnosis$stdev.unscaled)
head(all.fit$SourceDiagnosis$sigma)
head(all.fit$SourceDiagnosis$df.residual)
head(all.fit$SourceDiagnosis$pivot)
head(all.fit$SourceDiagnosis$cov.coefficients)
head(all.fit$SourceDiagnosis$design)
Dat <- read.csv('~/Desktop/Lucas.csv', header = T)
head(Dat)
library(ggplot2)
ggplot( data=Dat ) +
geom_point( x=deliveries, y=unique_open_rate )
ggplot( data=Dat ) +
geom_point( x='deliveries', y='unique_open_rate' )
ggplot( data=Dat ) +
geom_point( x='deliveries', y='unique_open_rate' )
ggplot( data=Dat ) +
geom_point( x=Dat$deliveries, y=Dat$unique_open_rate )
class(Dat)
str(Dat)
Dat$deliveries <- as.numeric(Dat$deliveries)
ggplot( data=Dat ) +
geom_point( x=Dat$deliveries, y=Dat$unique_open_rate )
ggplot( data=Dat ) +
geom_line( x=Dat$deliveries, y=Dat$unique_open_rate )
ggplot( data=Dat ) +
geom_point( aes( x=deliveries, y=unique_open_rate ) )
Dat$Log_deliveries <- log( Dat$deliveries )
ggplot( data=Dat ) +
geom_point( aes( x=Log_deliveries, y=unique_open_rate ) )
cor( Dat$Log_deliveries, Dat$unique_open_rate )
cor.test( Dat$Log_deliveries, Dat$unique_open_rate )
linearMod <- lm(Log_deliveries ~ unique_open_rate, data=Dat)
linearMod
summary(linearMod)
?glm
linearMod <- glm(Log_deliveries ~ unique_open_rate, data=Dat)
v
linearMod
linearMod <- glm(x=Log_deliveries, y=unique_open_rate, data=Dat)
linearMod <- glm(x=Dat$Log_deliveries, y=Dat$unique_open_rate, data=Dat)
linearMod <- glm(Log_deliveries ~ unique_open_rate, data=Dat)
Summary(linearMod)
summary(linearMod)
plot(linearMod)
abline(lm(height ~ bodymass))
linearMod <- glm(unique_open_rate~Log_deliveries, data=Dat)
linearMod
summary(v)
summary(v)
summary(linearMod)
ggplot( data=Dat ) +
geom_point( aes( x=Log_deliveries, y=unique_open_rate ) ) +
geom_smooth(method = "lm", se = FALSE)
ggplot( data=Dat ) +
geom_point( aes( x=Log_deliveries, y=unique_open_rate ) ) +
geom_smooth( aes( x=Log_deliveries, y=unique_open_rate ), method = "lm", se = FALSE)
ggplot( data=Dat ) +
geom_point( aes( x=Log_deliveries, y=unique_open_rate ) ) +
geom_smooth( aes( x=Log_deliveries, y=unique_open_rate ), method = "lm", se = T)
?cor.test
cor.test( Dat$Log_deliveries, Dat$unique_open_rate, method='kendall' )
cor.test( Dat$Log_deliveries, Dat$unique_open_rate, method='spearman' )
linearMod <- glm(unique_open_rate~Log_deliveries, data=Dat)
ggplot( data=Dat ) +
geom_point( aes( x=Log_deliveries, y=unique_open_rate ) ) +
geom_smooth( aes( x=Log_deliveries, y=unique_open_rate ), method = "lm", se = T)
synapser::synLogin()
# Load Scores
scores <- read.csv('~/desktop/genetics_scores_v1.csv')
# Pull Genetics Score Table
genetics_table <- synapser::synTableQuery(sprintf("select * from %s ", 'syn25575153'))
head(genetics_table)
head(genetics_table$asDataFrame())
deleted <- synapser::synDelete(genetics_table)
synapser::synStore(synapser::Table(genetics_table$tableId, scores))
head(scores[,21])
head(signif(scores[,21], digits = 8, force = TRUE))
head(signif(scores[,21], digits = 8))
scores[,21] <- signif(scores[,21], digits = 8)
synapser::synStore(synapser::Table(genetics_table$tableId, scores))
signif(scores[,21], digits = 8)[62]
signif(scores[,21], digits = 8)[61]
signif(scores[,22], digits = 8)[61]
signif(scores[,22], digits = 8)[62]
head(scores)
head(scores[,'min_gwasP'])
head(scores[,'min_gwasP'][62])
scores[,'min_qtlFDR'][62]
scores[,'min_gwasP'] <- signif(scores[,'min_gwasP'], digits = 8)
scores[,'min_qtlFDR'] <- signif(scores[,'min_qtlFDR'], digits = 8)
synapser::synStore(synapser::Table(genetics_table$tableId, scores))
head(scores[,1:21])
scores[,'GeneticsScore'] <- signif(scores[,'GeneticsScore'], digits = 8)
scores[,'score_rank'] <- signif(scores[,'score_rank'], digits = 8)
scores[,'n_gwas'] <- signif(scores[,'n_gwas'], digits = 8)
scores[,'n_qtl'] <- signif(scores[,'n_qtl'], digits = 8)
scores[,'min_qtlFDR'] <- signif(scores[,'min_qtlFDR'], digits = 8)
scores[,'n_snps'] <- signif(scores[,'n_snps'], digits = 8)
scores[,'coding_variant_summary'] <- signif(scores[,'coding_variant_summary'], digits = 8)
scores[,'gnomad_loeuf'] <- signif(scores[,'gnomad_loeuf'], digits = 8)
scores[,'n_codingSNP'] <- signif(scores[,'n_codingSNP'], digits = 8)
scores[,'max_delRank'] <- signif(scores[,'max_delRank'], digits = 8)
scores[,'max_spliceScore'] <- signif(scores[,'max_spliceScore'], digits = 8)
scores[,'noncoding_variant_summary'] <- signif(scores[,'noncoding_variant_summary'], digits = 8)
scores[,'n_qtlSNP'] <- signif(scores[,'n_qtlSNP'], digits = 8)
scores[,'qtl_absvBeta'] <- signif(scores[,'qtl_absvBeta'], digits = 8)
scores[,'qtl_log2_posBeta_ratio'] <- signif(scores[,'qtl_log2_posBeta_ratio'], digits = 8)
scores[,'min_regulomeRank'] <- signif(scores[,'min_regulomeRank'], digits = 8)
scores[,'mean_regulomeProb'] <- signif(scores[,'mean_regulomeProb'], digits = 8)
synapser::synStore(synapser::Table(genetics_table$tableId, scores))
dim(scores)
scores[,22:26]
head(scores[,22:26])
scores[,'deepsea_disSig'] <- signif(scores[,'deepsea_disSig'], digits = 8)
scores[,'Hsap_pheno_score'] <- signif(scores[,'Hsap_pheno_score'], digits = 8)
scores[,'n_hs_adRel'] <- signif(scores[,'n_hs_adRel'], digits = 8)
synapser::synStore(synapser::Table(genetics_table$tableId, scores))
body_json <- rjson::toJSON(c(snapshotComment = "Initial Flawed Version", snapshotLabel = "v1"))
snapshot <-  synapser::synRestPOST(paste0("/entity/", genetics_table$tableId, "/table/snapshot"), body = body_json)
scores <- read.csv('~/desktop/genetics_scores_v2.csv')
# Pull Genetics Score Table
genetics_table <- synapser::synTableQuery(sprintf("select * from %s ", 'syn25575153'))
deleted <- synapser::synDelete(genetics_table)
deleted <- synapser::synDelete(genetics_table)
scores <- read.csv('~/desktop/genetics_scores_v2.csv')
head(scores[,1:6])
synapser::synStore(synapser::Table(genetics_table$tableId, scores))
genetics_table$schema
genetics_table$setColumnHeaders
dim(scores)
genetics_table$schema
genetics_table$tableId
?synapser::Table
?synapser::Schema
synapser::Schema
########################################################################################
scores_2 <- read.csv('~/desktop/genetics_scores_v2.csv')
scores_1 <- read.csv('~/desktop/genetics_scores_v1.csv')
########################################################################################
scores_2 <- read.csv('~/desktop/genetics_scores_v2.csv')
colnames(scores_2)[ !(colnames(scores_2) %in% colnames(scores_1))]
colnames(scores_1)
head(scores_2[c("n_study","min_signif")])
?synapser::Schema
genetics_table$tableId
schema <- synapser::synGet('syn25575153')
schema <- synapser::synGet('syn25575153')
newColumn <- synapser::synStore(synapser::Column(name = "n_study", columnType = "INTEGER"))
newColumn2 <- synapser::synStore(synapser::Column(name = "min_signif",  columnType = "STRING", maximumSize = 50))
schema$addColumn(newColumn)
schema$addColumn(newColumn2)
## NULL
schema <- synapser::synStore(schema)
dim(scores_2)
synapser::synStore(synapser::Table(genetics_table$tableId, scores_2))
head(scores_2)
scores_2[,'GeneticsScore'] <- signif(scores_2[,'GeneticsScore'], digits = 8)
scores_2[,'n_study'] <- signif(scores_2[,'n_study'], digits = 8)
scores_2[,'min_signif'] <- signif(scores_2[,'min_signif'], digits = 8)
scores_2[,'gnomad_loeuf'] <- signif(scores_2[,'gnomad_loeuf'], digits = 8)
scores_2[,'n_codingDelSNP'] <- signif(scores_2[,'n_codingDelSNP'], digits = 8)
scores_2[,'n_qtlSNP'] <- signif(scores_2[,'n_qtlSNP'], digits = 8)
scores_2[,'min_regulomeRank'] <- signif(scores_2[,'min_regulomeRank'], digits = 8)
scores_2[,'mean_regulomeProb'] <- signif(scores_2[,'mean_regulomeProb'], digits = 8)
scores_2[,'deepsea_disSig'] <- signif(scores_2[,'deepsea_disSig'], digits = 8)
scores_2[,'Mmus_pheno_score'] <- signif(scores_2[,'Mmus_pheno_score'], digits = 8)
scores_2[,'n_hs_adRel'] <- signif(scores_2[,'n_hs_adRel'], digits = 8)
synapser::synStore(synapser::Table(genetics_table$tableId, scores_2))
# Create a snapshot of the Table Entity
body_json <- rjson::toJSON(c(snapshotComment = "Version 2 Scores Oct 2020; note: different schema", snapshotLabel = "v2")
)
snapshot <-  synapser::synRestPOST(paste0("/entity/", genetics_table$tableId, "/table/snapshot"), body = body_json)
################################################################################
scores_3 <- read.csv('~/desktop/genetics_scores_v3.csv')
# Pull Genetics Score Table
genetics_table <- synapser::synTableQuery(sprintf("select * from %s ", 'syn25575153'))
deleted <- synapser::synDelete(genetics_table)
colnames(scores_3)[ !(colnames(scores_3) %in% colnames(scores_2))]
colnames(scores_3)[ !(colnames(scores_3) %in% colnames(scores_1))]
synapser::synStore(synapser::Table(genetics_table$tableId, scores_3))
head(scores_3)
scores_3[,'GeneticsScore'] <- signif(scores_3[,'GeneticsScore'], digits = 8)
scores_3[,'score_rank'] <- signif(scores_3[,'score_rank'], digits = 8)
scores_3[,'n_gwas'] <- signif(scores_3[,'n_gwas'], digits = 8)
scores_3[,'min_gwasP'] <- signif(scores_3[,'min_gwasP'], digits = 8)
scores_3[,'n_qtl'] <- signif(scores_3[,'n_qtl'], digits = 8)
scores_3[,'min_qtlFDR'] <- signif(scores_3[,'min_qtlFDR'], digits = 8)
scores_3[,'n_snps'] <- signif(scores_3[,'n_snps'], digits = 8)
scores_3[,'coding_variant_summary'] <- signif(scores_3[,'coding_variant_summary'], digits = 8)
scores_3[,'gnomad_loeuf'] <- signif(scores_3[,'gnomad_loeuf'], digits = 8)
scores_3[,'n_codingSNP'] <- signif(scores_3[,'n_codingSNP'], digits = 8)
scores_3[,'max_delRank'] <- signif(scores_3[,'max_delRank'], digits = 8)
scores_3[,'max_spliceScore'] <- signif(scores_3[,'max_spliceScore'], digits = 8)
scores_3[,'noncoding_variant_summary'] <- signif(scores_3[,'noncoding_variant_summary'], digits = 8)
scores_3[,'n_qtlSNP'] <- signif(scores_3[,'n_qtlSNP'], digits = 8)
scores_3[,'qtl_absvBeta'] <- signif(scores_3[,'qtl_absvBeta'], digits = 8)
scores_3[,'qtl_log2_posBeta_ratio'] <- signif(scores_3[,'qtl_log2_posBeta_ratio'], digits = 8)
scores_3[,'min_regulomeRank'] <- signif(scores_3[,'min_regulomeRank'], digits = 8)
scores_3[,'mean_regulomeProb'] <- signif(scores_3[,'mean_regulomeProb'], digits = 8)
scores_3[,'deepsea_disSig'] <- signif(scores_3[,'deepsea_disSig'], digits = 8)
scores_3[,'Hsap_pheno_score'] <- signif(scores_3[,'Hsap_pheno_score'], digits = 8)
scores_3[,'MODELAD'] <- signif(scores_3[,'MODELAD'], digits = 8)
scores_3[,'Mmus_pheno_score'] <- signif(scores_3[,'Mmus_pheno_score'], digits = 8)
scores_3[,'n_mm_adRel'] <- signif(scores_3[,'n_mm_adRel'], digits = 8)
scores_3[,'n_hs_adRel'] <- signif(scores_3[,'n_hs_adRel'], digits = 8)
synapser::synStore(synapser::Table(genetics_table$tableId, scores_3))
body_json <- rjson::toJSON(c(snapshotComment = "Version 3 Scores Apr 2021", snapshotLabel = "v3"))
snapshot <-  synapser::synRestPOST(paste0("/entity/", genetics_table$tableId, "/table/snapshot"), body = body_json)
over_1 <- read.csv('~/desktop/overall_scores_v1.csv')
# Pull Genetics Score Table
overall_table <- synapser::synTableQuery(sprintf("select * from %s ", 'syn25575156'))
deleted <- synapser::synDelete(overall_table)
deleted <- synapser::synDelete(overall_table)
synapser::synStore(synapser::Table(genetics_table$tableId, scores))
deleted <- synapser::synDelete(overall_table)
over_1 <- read.csv('~/desktop/overall_scores_v1.csv')
# Pull Genetics Score Table
overall_table <- synapser::synTableQuery(sprintf("select * from %s ", 'syn25575156'))
deleted <- synapser::synDelete(overall_table)
synapser::synStore(synapser::Table(genetics_table$tableId, over_1))
colnames(overall_table$asDataFrame())
colnames(over_1)[ colnames(over_1) %in% colnames(overall_table$asDataFrame()) ]
colnames(over_1)[ !(colnames(over_1) %in% colnames(overall_table$asDataFrame())) ]
synapser::synStore(synapser::Table(overall_table$tableId, over_1))
# Create a snapshot of the Table Entity
body_json <- rjson::toJSON(c(snapshotComment = "Initial Flawed Version", snapshotLabel = "v1"))
snapshot <-  synapser::synRestPOST(paste0("/entity/", overall_table$tableId, "/table/snapshot"), body = body_json)
over_2 <- read.csv('~/desktop/overall_scores_v2.csv')
# Pull Genetics Score Table
overall_table <- synapser::synTableQuery(sprintf("select * from %s ", 'syn25575156'))
deleted <- synapser::synDelete(overall_table)
synapser::synStore(synapser::Table(overall_table$tableId, over_2))
head(over_2)
over_2[320:325,1]
as.character(over_2[,1][ grepl('beta', as.character(over_2[,1])])
as.character(over_2[,1])[ grepl('beta', as.character(over_2[,1])]
as.character(over_2[,1])[ grepl('beta', as.character(over_2[,1])) ]
as.character(over_2[,1])[ grepl('ENSG00000142192', as.character(over_2[,1])) ]
head(over_2[1;5,])
head(over_2[1:5,])
notesColumn <- synapser::synStore(synapser::Column(name = "ENSG", columnType = "STRING", maximumSize = 15))
schema <- synapser::synGet('syn25575156')
schema$removeColumn(notesColumn)
notesColumn <- synapser::synStore(synapser::Column(name = "ENSG", columnType = "STRING", maximumSize = 25))
schema$addColumn(notesColumn)
schema <- synapser::synStore(schema)
synapser::synStore(synapser::Table(overall_table$tableId, over_2))
# Create a snapshot of the Table Entity
body_json <- rjson::toJSON(c(snapshotComment = "Version 2 Scores Nov 2020", snapshotLabel = "v2"))
snapshot <-  synapser::synRestPOST(paste0("/entity/", overall_table$tableId, "/table/snapshot"), body = body_json)
over_3 <- read.csv('~/desktop/overall_scores_v3.csv')
# Pull Genetics Score Table
overall_table <- synapser::synTableQuery(sprintf("select * from %s ", 'syn25575156'))
deleted <- synapser::synDelete(overall_table)
synapser::synStore(synapser::Table(overall_table$tableId, over_3))
# Create a snapshot of the Table Entity
body_json <- rjson::toJSON(c(snapshotComment = "Version 3 Scores Apr 2021", snapshotLabel = "v3"))
snapshot <-  synapser::synRestPOST(paste0("/entity/", overall_table$tableId, "/table/snapshot"), body = body_json)
devtools::document()
getwd()
setwd('Desktop/Projects/PathwayTraceDev/igraphNetworkExpansion')
devtools::document()
BiocManager::install("org.Hs.eg.db")
devtools::document()
devtools::document()
devtools::check()
usethis::use_vignette()
usethis::use_vignette('vignettes/01_Base_Network_Assembally.Rmd')
usethis::use_vignette('vignettes/01_Base_Network_Assembally')
usethis::use_vignette('01_Base_Network_Assembally')
usethis::use_vignette('Vignette_01_Base_Network_Assembally')
devtools::document()
devtools::check()
devtools::document()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#> Define the SIF formatted files stored in synapse to use for net construction
sif_files <- c(
'syn21914063', 'syn21914056', 'syn21914057', 'syn21914059', 'syn21914061',
'syn21914064', 'syn21914065', 'syn21914070', 'syn21914071', 'syn21914072',
'syn21914078', 'syn21914082', 'syn21914083', 'syn21914087', 'syn21914090',
'syn21914091', 'syn21914093', 'syn21914094', 'syn21914074'
)
names(sif_files) <- c(
'Detailed',  'bind',  'biogrid',  'corum',  'ctd',
'dip', 'drugbank', 'hprd', 'humancyc', 'intacsyngnc',
'msigdb', 'netpath', 'panther', 'pathbank', 'pid',
'psp', 'reactome', 'reconx', 'kegg'
)
#> Load the SIF Files and Construct the igraph Network Object
#Data <- sif_loader(sif_files, syn$synapse)
loaded_data <- igraphNetworkExpansion::sif_loader(sif_files, syn$synapse)
syn
syn <- igraphNetworkExpansion::log_into_synapse()
igraphNetworkExpansion::log_into_synapse
reticulate::conda_create("r-reticulate")
reticulate::use_python('/usr/bin/python3')
synapseclient <- reticulate::import("synapseclient")
synapseclient
synapseclient <- reticulate::import("synapseclient")
reticulate::use_python('/usr/bin/python')
synapseclient <- reticulate::import("synapseclient")
synapseclient
igraphNetworkExpansion::log_into_synapse
client_import <- synapseclient$Synapse()
client_import$login()
syn <- list(synapse = client_import, client = synapseclient)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
sif_files <- c(
'syn21914063', 'syn21914056', 'syn21914057', 'syn21914059', 'syn21914061',
'syn21914064', 'syn21914065', 'syn21914070', 'syn21914071', 'syn21914072',
'syn21914078', 'syn21914082', 'syn21914083', 'syn21914087', 'syn21914090',
'syn21914091', 'syn21914093', 'syn21914094', 'syn21914074'
)
names(sif_files) <- c(
'Detailed',  'bind',  'biogrid',  'corum',  'ctd',
'dip', 'drugbank', 'hprd', 'humancyc', 'intacsyngnc',
'msigdb', 'netpath', 'panther', 'pathbank', 'pid',
'psp', 'reactome', 'reconx', 'kegg'
)
loaded_data <- igraphNetworkExpansion::sif_loader(sif_files, syn$synapse)
remotes::install_github('jgockley62/igraphNetworkExpansion', ref = 'function_dev')
#> Load the SIF Files and Construct the igraph Network Object
#Data <- sif_loader(sif_files, syn$synapse)
loaded_data <- igraphNetworkExpansion::sif_loader(sif_files, syn$synapse)
syn$client$login()
syn$synapse$login()
syn
syn$synapse
reticulate::use_python('/usr/bin/python')
igraphNetworkExpansion::log_into_synapse
synapseclient <- reticulate::import("synapseclient")
client_import <- synapseclient$Synapse()
client_import$login()
syn <-list(synapse = client_import, client = synapseclient)
loaded_data <- igraphNetworkExpansion::sif_loader(sif_files, syn$synapse)
igraphNetworkExpansion::sif_loader
sifs <- sif_files
synap_import <- syn$synapse
total_list <- list()
trial <- for (i in names(sifs)) {
temp <- igraphNetworkExpansion::sif_boot(sifs[i], i,
synap_import)
total_list[[i]] <- temp
}
total <- do.call(rbind, total_list)
total <- total[, c("V1", "V3", "V2", "Pathway")]
colnames(total) <- c("from", "to", "interaction", "pathway")
total$Occurance <- paste0(total$from, "-", total$to, ":",
total$interaction)
occurances <- paste0(total$from, "-", total$to, ":", total$interaction)
table_occurances <- table(occurances)
total$Occurance <- as.numeric(table_occurances[total$Occurance])
genes <- c(as.character(total$from), as.character(total$to))
genes <- genes[!duplicated(genes)]
genes <- as.data.frame(genes)
total$UniqCol <- paste0(as.character(total$from), ":", as.character(total$to),
"-", as.character(total$interaction))
dt <- data.table::data.table(total[, c("UniqCol", "pathway")])
head(dt)
data <- dt[, lapply(.SD, function(col) paste(col, collapse = ", ")),
by = .(UniqCol)]
head(data)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#> Load the SIF Files and Construct the igraph Network Object
#Data <- sif_loader(sif_files, syn$synapse)
loaded_data <- igraphNetworkExpansion::sif_loader(sif_files, syn$synapse)
data <- dt[, lapply(.SD, function(col) paste(col, collapse = ", ")), by = .(UniqCol)]
?lapply
data <- dt[, lapply(., function(col) paste(col, collapse = ", ")), by = .(UniqCol)]
data <- dt[, lapply(.SD, function(SD) paste(col, collapse = ", ")), by = .(UniqCol)]
data <- dt[, lapply(.col, function(col) paste(col, collapse = ", ")), by = .(UniqCol)]
heac(data)
head(data)
head(dt)
data <- dt[, lapply(.SD, function(col) paste(col, collapse = ", ")), by = .(UniqCol)]
head(data)
head(dt)
data <- dt[, lapply(.dt, function(col) paste(col, collapse = ", ")), by = .(UniqCol)]
data <- dt[, lapply(dt, function(col) paste(col, collapse = ", ")), by = .(UniqCol)]
datahead(data)
head(data)
SD
.SD
data <- dt[,lapply(
.SD,
function(col) paste(
col,
collapse=", ")
),
by=.(UniqCol)]
?.SD
?data.table::.SD
getwd()
devtools::document()
devtools::check()
data.table:::.SD
data.table::.SD
data.table:::.SD
importFrom(data.table, .SD)
importFrom(data.table, .SD)
devtools::document()
devtools::check()
import(foreach)
library(foreach)
??stopCluster
?save
devtools::document()
devtools::document()
devtools::document()
#'   are there between to and from vertacies}
#'   \item{igraph::E(basic_network$network)$Edge}{The to:from name desigantion
#'   of the edge}
#'   \item{igraph::E(basic_network$network)$SumOccurancel}{how many times is to
#'    vertex connected to from vertex across all pathway commons data bases and
#'    interaction types}
#'   \item{basic_network$graph}{A list of igraph network objects by interaction
#'   type, all edge and vertex attributes are the same as basic_network$network}
#'   ...
#' }
"basic_network"
source('~/Desktop/Projects/PathwayTraceDev/igraphNetworkExpansion/R/data.R')
devtools::document()
debugSource('~/Desktop/Projects/PathwayTraceDev/igraphNetworkExpansion/R/data.R')
devtools::document()
source('~/Desktop/Projects/PathwayTraceDev/igraphNetworkExpansion/R/data.R')
getwd()
list.files('data/')
load('data/basic_network.rda')
source('~/Desktop/Projects/PathwayTraceDev/igraphNetworkExpansion/R/data.R')
data
basic_network<-data
save(basic_network, file="data/basic_network.rda", compress='xz')
devtools::document()
devtools::check()
devtools::document()
devtools::check()
invisible(basic_netwrok)
invisible(basic_network)
tools::checkRdaFiles('data/basic_network.rda')
tools::checkRdaFiles('data/genelists.rda')
tools::checkRdaFiles('data/sample_network.rda')
tools::checkRdaFiles('data/slim_net.rda')
usethis::use_data()
?usethis::use_data()
usethis::use_data(basic_network)
usethis::use_data(basic_network, overwrite=T)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_data(basic_network, overwrite=T, compress"xz")
usethis::use_data(basic_network, overwrite=T, compress="xz")
basic_network_interactions<-basic_network$graph
basic_network_table <- basic_network$data_frame
basic_network <- basic_network$network
usethis::use_data(basic_network_interactions, overwrite=T, compress="xz")
usethis::use_data(basic_network_table, overwrite=T, compress="xz")
usethis::use_data(basic_network, overwrite=T, compress="xz")
source('~/Desktop/Projects/PathwayTraceDev/igraphNetworkExpansion/R/data.R')
devtools::document()
devtools::check()
998+2766+6367
devtools::document()
A <- read.table( syn$synapse$get('syn24172493')$path, sep='\t', header=T)
B <- read.table( syn$synapse$get('syn25647855')$path, sep='\t', header=T)
C <- read.table( syn$synapse$get('syn25647853')$path, sep='\t', header=T)
head(A)
A <- read.table( syn$synapse$get('syn24172493')$path, sep='', header=T)
head(A)
A <- read.table( syn$synapse$get('syn24172493')$path, sep='', header=F)
head(A)
B <- read.table( syn$synapse$get('syn25647855')$path, sep='', header=F)
C <- read.table( syn$synapse$get('syn25647853')$path, sep='\t', header=F)
C <- read.table( syn$synapse$get('syn25647853')$path, sep='', header=F)
hsq <- rbind(A,B,C)
dim(hsq)
head(hsq)
head(gsub('All_Data/ALL/','',hsq$V1))
class(hsq$V1)
head(gsub('All_Data/ALL/','',as.character(hsq$V1)))
hsq$V1 <- gsub('All_Data/ALL/','',as.character(hsq$V1))
str(hsq)
head(hsq)
table(table(hsq$V1))
1003+64
hsq[ hsq$V1 == 'ENSG00000163703',]
colnames(hsq) <- c('ENSG', 'Vg/Vp','SE_Vg/Vp','PVal')
head(hsq)
write.csv(hsq, file='~/Desktop/hsq_Combined.csv', row.names = F, col.names = T, quote = F)
dim(hsq)
dim(hsq[!duplicated(hsq),])
hsq <- hsq[!duplicated(hsq),]
write.csv(hsq, file='~/Desktop/hsq_Combined.csv', row.names = F, quote = F)
