path_filter <-  function (indv_path, weights, lim ) {
scores <- weights[names(indv_path)]
#Filter out origin and terminus
scores <- scores[1:(length(scores) -1)][-1]
if(length(scores) == 0){
return(
list( Keep = names(indv_path),
Genes = names(indv_path),
Used = 1,
Passed = 1
)
)
}
scores <- scores[ !(is.na(scores)) ]
if(length(scores) > 0){
used <- 1
}else{ used <- 0 }
if (mean(scores) > lim){
return(
list( Keep = names(scores),
Genes = names(scores),
Used = used,
Passed = 1
)
)
}else{
return(
list( Keep = NA,
Genes = names(scores),
Used = used,
Passed = 0
)
)
}
}
#' Finds the limit cutoff when target and sentinal paths are given
#'
#' @param vertices the vertices vector from find_limit
#' @param path_obj pathtrace object from short_paths()
#' @param lim the filter limit value
#' @param path_name the name of the path for message (target or sentinal)
#' @param weights the gene OMICS scores or score metric by verex to weight paths
path_obj_filter <- function( path_obj, vertices, lim, path_name, weights ) {
## Target path filtering
## Target path filtering
if ((length(vertices) == 1) &
is.na(vertices)[1]) {
message('Target Path Trace Returned No Paths')
}else{
# Filter the target Paths
fitlered_paths <- parallel::mclapply(
path_obj$res,
path_filter,
lim=lim,
weights=weights,
mc.cores = 14
)
filter_summary <- do.call(Map, c(c, fitlered_paths))
vertices <- filter_summary$Keep[ !duplicated(filter_summary$Keep)]
vertices <- vertices[!(is.na(vertices))]
all_vertices <- filter_summary$Genes[ !duplicated(filter_summary$Genes)]
all_vertices <- all_vertices[!(is.na(all_vertices))]
#Paths Kept - ISSUE Here
message(paste0(
sum(filter_summary$Passed),
" ",
path_name,
" paths out of ",
length(path_obj$res),
" ( ",
signif(
sum(filter_summary$Passed) / length(path_obj$res),
4
) * 100,
"% ) kept"
))
#Genes Filtered Out
message(paste0(
length(all_vertices) - length(vertices),
' of ',
length(all_vertices),
' ',
path_name,
' genes ( ',
signif(
(length(all_vertices) - length(vertices)) / length(all_vertices),
4
) * 100,
'% ) filtered out'
))
}
return( vertices )
}
#' Finds the limit cutoff when target and sentinal paths are given
#'
#' @param s_path the sentinel path object
#' @param t_path the target path object
#' @param weights OMICS/vertex scores as named vector
find_limit <- function ( s_path, t_path, weights) {
#if there are no sentinel paths return empty and look at target
if(length(s_path$res)==0) {
s_path$res <- 1
}
if(length(t_path$res)==0) {
t_path$res <- 1
}
if ((length(s_path$res) == 1) & (length(s_path$res[[1]]) == 1)) {
sent_keep_vertices <- NA
if ((length(t_path$res) == 1) & (length(t_path$res[[1]]) == 1)) {
target_vertices <- NA
limit <- NA
}else{
target_vertices <- c(0,0,0)
#set limit based on targets
scores <- do.call(c, parallel::mclapply(
t_path$res,
path_calc,
weights=weights,
mc.cores = 14
))
# Look at limit of highest between mean or median non-zero sentinel paths
target_summary <- summary(
scores[(scores > 0) & (is.na(scores) == F)]
)
if (target_summary['Mean'] > target_summary['Median']) {
limit <- target_summary['Mean']
}else{
limit <- target_summary['Median']
}
}
}else{
target_vertices <- c(0,0,0)
sent_keep_vertices <- c(0,0,0)
sent_scores <- do.call(c, parallel::mclapply(
s_path$res,
path_calc,
weights=weights,
mc.cores = 14
))
# Look at limit of highest between mean or median non-zero sentinal paths
sentinal_summary <- summary(
sent_scores[(sent_scores > 0) & (is.na(sent_scores) == F)]
)
if (sentinal_summary['Mean'] > sentinal_summary['Median']) {
limit <- sentinal_summary['Mean']
}else{
limit <- sentinal_summary['Median']
}
}
return(list(
cutoff = limit,
t_verts = target_vertices,
s_verts = sent_keep_vertices
))
}
#' Traces the shortest paths of the target gene pairwise to the sentinels
#' Traces the the shortest paths of target gene paiwise to the target gene list
#' Returns the list of genes in paths which score over the median of non-zero
#' paths
#'@param tnet igraph network (Main entire network) eg. net/net_undirected/JS_net_undirected
#'@param target the from gene target eg Genes[1]
#'@param targets List of the total list of targets in the User set eg. Genes
#'@param sentinals List of the sentinal genes to trace to eg. Sentinal
short_paths <- function( tnet, target, targets, sentinals ){
message( paste0( 'Working on: ', target))
# Pull paths that have median OMICS Score. ( Need to integrate a Genetics+Genomics Measure )
omics_scores <- setNames(V(tnet)$weight, V(tnet)$name)
# All Shortest paths from target to Target Genes directed
snet <- igraph::simplify(
tnet,
remove.multiple = TRUE,
remove.loops = FALSE,
)
paths <- get.all.shortest.paths(
snet,
from = target,
to = V(snet)[ names(V(snet)) %in% targets ],
mode = c("all")
)
# All Shortest paths from target to Sentinel Genes
sent_paths <- get.all.shortest.paths(
snet,
from = target,
to = V(snet)[ names(V(snet)) %in% sentinals ],
mode = c("all")
)
## Find the limit cut off
cutoff_obj <- find_limit(
s_path = sent_paths,
t_path = paths,
weights = omics_scores
)
## Target path filtering
t_vertices <- path_obj_filter(
path_obj = paths,
vertices = cutoff_obj$t_verts,
lim = cutoff_obj$cutoff,
path_name ='target',
weights = omics_scores
)
## Sentinal path filtering
s_vertices <- path_obj_filter(
path_obj = sent_paths,
vertices = cutoff_obj$s_verts,
lim = cutoff_obj$cutoff,
path_name ='sentinel',
weights = omics_scores
)
return(list( Inter = t_vertices, Sentinal=s_vertices))
}
#'Process a path trace list
#'
#'This function takes a path trac object and transforms it into the list of
#' genes to keep for the sub network
#'@param path_obj pathtrace object from short_paths()
trace_filter <- function (path_obj) {
#collapse Pairwise Pass genes and Sentinal Path Genes
list_tar <- NULL
sentinal_tar <- NULL
len_lts <- NULL
len_sts <- NULL
for( i in 1:length(path_obj) ){
len_lts <- c( len_lts, length( path_obj[[i]]$Inter ) )
len_sts <- c( len_sts, length( path_obj[[i]]$Sentinal ) )
list_tar <- c(list_tar, path_obj[[i]]$Inter)
sentinal_tar <- c(sentinal_tar, path_obj[[i]]$Sentinal)
}
length( list_tar[!duplicated(list_tar)] )
length( sentinal_tar[!duplicated(sentinal_tar)] )
table( list_tar[!duplicated(list_tar)] %in% sentinal_tar[!duplicated(sentinal_tar)] )
gene_list <- sentinal_tar[!duplicated(sentinal_tar)][
sentinal_tar[ !duplicated(sentinal_tar) ] %in%
list_tar[ !duplicated(list_tar) ]
]
return(gene_list)
}
#'Push Network to Synapse
#'
#'This function takes a network object and pushes it to synapse
#'@param network the igraph network to push to synapse eg. net
#'@param net_filename the file name of the network without file extension
#'@param net_synname the desplay name of the network in synapse
#'@param p_id the parent synapse ID of the network destination
#'@param folder the name of the storage folder in the parent synapse ID to store the net
#'@param act_name the name of the syn activity object to
#'@param act_desc the description of the syn activity object to
#'@param code the path of the code which generated the network for the provenance (optional)
#'@param repo the repo which generated the network for the provenance (optional)
#'@param syn_used character vector of synIDs to seed the provenance (optional)
#'@param subset An vector of vertex names to filter the network for (optional) eg. test
#'@param prov_object A pre made github code provenance object or vector of objects
store_net <- function (network, net_filename, net_synname,
p_id, folder, act_name, act_desc,
code=NULL, repo=NULL,
syn_used=NULL, subset=NULL,
prov_object = NULL) {
#Set Activity
activity <- syn_temp$store(synapseclient$Folder(name = folder, parentId = p_id))
#Set annotations
all.annotations = list(
dataType = 'Network',
summaryLevel = 'gene',
assay	 = 'RNAseq',
tissueTypeAbrv	= c('IFG', 'STG', 'FP', 'PHG', 'TCX', 'DLFPC'),
study = c( 'MSBB', 'ROSMAP', 'Mayo' ),
organism = 'HomoSapiens',
consortium	= 'TreatAD',
genomeAssemblyID = 'GRCh38'
)
#Subset the network if there is a vertex vector given
if (!is.null(subset)) {
network <- induced_subgraph( network, v=V(network)[ names(V(network)) %in% subset ] )
}
#eg. IGRAPH ff4b668 DN-- 486 6119 --
sub_net_simple <- igraph::simplify(
network,
remove.multiple = TRUE,
remove.loops = FALSE,
edge.attr.comb = list( interaction = "concat",
Occurance = "concat",
UniqCol = "concat",
pathway = "concat",
EdgeRep = "mean",
Edge = "random",
SumOccurence = "mean",
DLPFC_CE = "mean",
CBE_CE = "mean",
FP_CE = "mean",
IFG_CE = "mean",
PHG_CE = "mean",
STG_CE = "mean",
TCX_CE = "mean",
Avg_Cortex_CE = "mean",
Avg_All_CE = "mean"
)
)
# Github link - "jgockley62/igraph_Network_Expansion"
if (is.null(prov_object)) {
if (!is.null(repo) | !is.null(code)) {
this_repo <- githubr::getRepo(repository = repo, ref="branch", refName='master')
this_file <- githubr::getPermlink(repository = this_repo, repositoryPath = code)
}else{
this_file <- NULL
}
}else{
this_file <- prov_object
}
# write file
igraph::write_graph(
network,
paste0( '~/igraph_Network_Expansion/', net_filename,'.graphml'),
format = "graphml"
)
# push file
enrich_obj <-  syn_temp$store(
synapseclient$File(
path=paste0( '~/igraph_Network_Expansion/', net_filename,'.graphml'),
name = net_synname,
parentId=activity$properties$id ),
used = syn_used,
executed = this_file,
activityName = act_name,
activityDescription = act_desc
)
}
all_goterms <- list(
c('syn25185319', "APP_Metabolism", "APP Metabolism"),
c('syn25185320', "Endolysosomal", "Endolysosomal"),
c('syn25185321', "Epigenetic_Regulation", "Epigenetic Regulation"),
c('syn25185322', "Immune_Response", "Immune Response"),
c('syn25185323', "Lipid_Metabolism", "Lipid Metabolism"),
c('syn25185324', "Mitochondria Metabolism", "Mitochondria Metabolism"),
c('syn25185326', "Myelination", "Myelination"),
c('syn25185327', "Oxidative_Stress", "Oxidative Stress"),
c('syn25185329', "RNA_Spliceosome", "RNA Spliceosome"),
c('syn25185328', "Regulation_of_Apoptosis", "Regulation of Apoptosis"),
c('syn25185330', "Structural_Stabilization", "Structural Stabilization"),
c('syn25185331', "Synaptic_Dysfunction", "Synaptic Dysfunction"),
c('syn25185332', "Tau Homeostasis", "Tau Homeostasis"),
c('syn25185333', "Vascular_Function", "Vascular Function")
)
# Assemble the List Object to Call all nets
leading_edge <- list(
c('syn25185303', "APP_Metabolism", "APP Metabolism"),
c('syn25185304', "Endolysosomal", "Endolysosomal"),
c('syn25185305', "Epigenetic_Regulation", "Epigenetic Regulation"),
c('syn25185306', "Immune_Response", "Immune Response"),
c('syn25185307', "Lipid_Metabolism", "Lipid Metabolism"),
c('syn25185308', "Mitochondria Metabolism", "Mitochondria Metabolism"),
c('syn25185309', "Myelination", "Myelination"),
c('syn25185310', "Oxidative_Stress", "Oxidative Stress"),
c('syn25185312', "RNA_Spliceosome", "RNA Spliceosome"),
c('syn25185311', "Regulation_of_Apoptosis", "Regulation of Apoptosis"),
c('syn25185313', "Structural_Stabilization", "Structural Stabilization"),
c('syn25185315', "Synaptic_Dysfunction", "Synaptic Dysfunction"),
c('syn25185316', "Tau Homeostasis", "Tau Homeostasis"),
c('syn25185317', "Vascular_Function", "Vascular Function")
)
all_biodomain <- list(
c('syn25322503', "APP_Metabolism", "APP Metabolism"),
c('syn25322504', "Endolysosomal", "Endolysosomal"),
c('syn25322505', "Epigenetic_Regulation", "Epigenetic Regulation"),
c('syn25322506', "Immune_Response", "Immune Response"),
c('syn25322507', "Lipid_Metabolism", "Lipid Metabolism"),
c('syn25322508', "Mitochondria_Metabolism", "Mitochondria Metabolism"),
c('syn25322509', "Myelination", "Myelination"),
c('syn25322511', "Oxidative_Stress", "Oxidative Stress"),
c('syn25322514', "RNA_Spliceosome", "RNA Spliceosome"),
c('syn25322513', "Regulation_of_Apoptosis", "Regulation of Apoptosis"),
c('syn25322515', "Structural_Stabilization", "Structural Stabilization"),
c('syn25322516', "Synaptic_Dysfunction", "Synaptic Dysfunction"),
c('syn25322517', "Tau_Homeostasis", "Tau Homeostasis"),
c('syn25322518', "Vascular_Function", "Vascular Function")
)
allgo_gene <- list()
allgo_subnet <- list()
for (i in 1:length(all_goterms)) {
### Load Lists:
genes <- list_load( all_goterms[[i]][1], net, is_syn = TRUE )
sentinal <-  list_load( all_goterms[[i]][1], net, is_syn = TRUE )
}
################################################################################
# Assemble the List Object to Call all nets
all_goterms <- list(
c('syn25431115', "APP_Metabolism", "APP Metabolism"),
c('syn25431113', "Apoptosis_Regulation", "Apoptosis Regulation"),
c('syn25431116', "Autophagy", "Autophagy"),
c('syn25431117', "Endolysosomal", "Endolysosomal"),
c('syn25431118', "Epigenetic", "Epigenetic"),
c('syn25431120', "Immune_Response", "Immune Response"),
c('syn25431121', "Lipid_Metabolism", "Lipid Metabolism"),
c('syn25431123', "Mitochondria Metabolism", "Mitochondria Metabolism"),
c('syn25431124', "Myelination", "Myelination"),
c('syn25431126', "Oxidative_Stress", "Oxidative Stress"),
c('syn25431128', "RNA_Spliceosome", "RNA Spliceosome"),
c('syn25431129', "Structural_Stabilization", "Structural Stabilization"),
c('syn25431130', "Synaptic_Dysfunction", "Synaptic Dysfunction"),
c('syn25431132', "Tau_Homeostasis", "Tau Homeostasis"),
c('syn25431133', "Vascular_Function", "Vascular Function")
)
allgo_gene <- list()
allgo_subnet <- list()
for (i in 1:length(all_goterms)) {
### Load Lists:
genes <- list_load( all_goterms[[i]][1], net, is_syn = TRUE )
sentinal <-  list_load( all_goterms[[i]][1], net, is_syn = TRUE )
}
library(igraph)
for (i in 1:length(all_goterms)) {
### Load Lists:
genes <- list_load( all_goterms[[i]][1], net, is_syn = TRUE )
sentinal <-  list_load( all_goterms[[i]][1], net, is_syn = TRUE )
}
genelists <- list(targets=genes,)
genelists <- list(targets=genes,sentinals=sentinal)
?save
save(genelists, file='data/genelists.RDat', compress = 'xz')
invisible(genelists)
genelists$targets
genes
genelists <- list(targets=allgo_gene,sentinals=allgo_gene)
genelists$targets
for (i in 1:length(all_goterms)) {
### Load Lists:
genes <- list_load( all_goterms[[i]][1], net, is_syn = TRUE )
allgo_gene[[all_goterms[[i]][2]]] <- genes
}
genelists <- list(targets=genes,sentinals=sentinal)
genelists <- list(targets=allgo_gene,sentinals=allgo_gene)
save(genelists, file='data/genelists.RDat', compress = 'xz')
invisible(genelists)
genelists$targets$APP_Metabolism[1]
example_path <- short_paths(
tnet = slim_net,
target = genelists$targets$APP_Metabolism[1],
targets = genelists$targets$APP_Metabolism,
sentinals = genelists$sentinals$Immune_Response,
cores = 1
)
igraphNetworkExpansion::example_path <- short_paths(
tnet = slim_net,
target = genelists$targets$APP_Metabolism[1],
targets = genelists$targets$APP_Metabolism,
sentinals = genelists$sentinals$Immune_Response,
cores = 1
)
rm(short_paths)
igraphNetworkExpansion::example_path <- short_paths(
tnet = slim_net,
target = genelists$targets$APP_Metabolism[1],
targets = genelists$targets$APP_Metabolism,
sentinals = genelists$sentinals$Immune_Response,
cores = 1
)
example_path <- short_paths(
tnet = slim_net,
target = genelists$targets$APP_Metabolism[1],
targets = genelists$targets$APP_Metabolism,
sentinals = genelists$sentinals$Immune_Response,
cores = 1
)
example_path
devtools::document()
rm(find_limit())
rm(find_limit
)
rm(list_load)
rm(name_pull)
rm(path_calc)
rm(path_filter)
rm(path_obj_filter)
rm(store_net)
rm(trace_filter)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
syn <- log_into_synapse()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library install.packages('graphics')
install.packages(graphics)
install.packages('graphics')
install.packages("graphics")
BiocManager::install('graphics')
BiocManager::install('grDevices')
install.packages('stats')
install.packages("stats")
BiocManager::install('stats')
install.packages("utils")
install.packages("utils")
BiocManager::install('utils')
devtools::document()
devtools::check()
use_github_actions()
usethis::use_github_actions()
getwd()
use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
usethis::use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
getwd()
